# Function to calculate the mean and the standard deviation
# for each group
#+++++++++++++++++++++++++
# data : a data frame
# varname : the name of a column containing the variable
#to be summariezed
# groupnames : vector of column names to be used as
# grouping variables
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
df2 <- data_summary(data, varname="Accuracy",
groupnames=c("Concept", "Batch"))
library(ggplot2)
# Default bar plot
p<- ggplot(df2, aes(x=Concept, y=Accuracy, fill=Batch)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=Accuracy-sd, ymax=Accuracy+sd), width=.2,
position=position_dodge(.9))+
coord_cartesian(ylim = c(0.044,0.955))
print(p)
ggsave(filename = "test.png", plot = p ,path = "/Users/gonzalojaimovitch/Desktop/gpt3a_acc_err", height = 70, width = 120, units = "mm")
library(scales)
setwd("~/Desktop/gpt2_acc_err")
data <- read.csv(file = "file_noempty.csv",sep=";")
data$Batch <- factor(data$Batch, levels = c('WS','AS I','AS II'))
#+++++++++++++++++++++++++
# Function to calculate the mean and the standard deviation
# for each group
#+++++++++++++++++++++++++
# data : a data frame
# varname : the name of a column containing the variable
#to be summariezed
# groupnames : vector of column names to be used as
# grouping variables
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
df2 <- data_summary(data, varname="Accuracy",
groupnames=c("Concept", "Batch"))
library(ggplot2)
# Default bar plot
p<- ggplot(df2, aes(x=Concept, y=Accuracy, fill=Batch)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=Accuracy-sd, ymax=Accuracy+sd), width=.2,
position=position_dodge(.9))+
coord_cartesian(ylim = c(0.044,0.955))
print(p)
ggsave(filename = "test1.png", plot = p ,path = "/Users/gonzalojaimovitch/Desktop/gpt2_acc_err", height = 70, width = 120, units = "mm")
library(scales)
setwd("~/Desktop/gpt2_acc_err")
data <- read.csv(file = "file_alltest.csv",sep=";")
data$Batch <- factor(data$Batch, levels = c('WS','AS I','AS II'))
#+++++++++++++++++++++++++
# Function to calculate the mean and the standard deviation
# for each group
#+++++++++++++++++++++++++
# data : a data frame
# varname : the name of a column containing the variable
#to be summariezed
# groupnames : vector of column names to be used as
# grouping variables
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
df2 <- data_summary(data, varname="Accuracy",
groupnames=c("Concept", "Batch"))
library(ggplot2)
# Default bar plot
p<- ggplot(df2, aes(x=Concept, y=Accuracy, fill=Batch)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=Accuracy-sd, ymax=Accuracy+sd), width=.2,
position=position_dodge(.9))+
coord_cartesian(ylim = c(0.044,0.955))
print(p)
ggsave(filename = "test.png", plot = p ,path = "/Users/gonzalojaimovitch/Desktop/gpt2_acc_err", height = 70, width = 120, units = "mm")
library(scales)
setwd("~/Desktop/hum_acc_err")
data <- read.csv(file = "file_alltest.csv",sep=";")
data$Batch <- factor(data$Batch, levels = c('WS','AS I','AS II'))
#+++++++++++++++++++++++++
# Function to calculate the mean and the standard deviation
# for each group
#+++++++++++++++++++++++++
# data : a data frame
# varname : the name of a column containing the variable
#to be summariezed
# groupnames : vector of column names to be used as
# grouping variables
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
df2 <- data_summary(data, varname="Accuracy",
groupnames=c("Concept", "Batch"))
library(ggplot2)
# Default bar plot
p<- ggplot(df2, aes(x=Concept, y=Accuracy, fill=Batch)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=Accuracy-sd, ymax=Accuracy+sd), width=.2,
position=position_dodge(.9))+
coord_cartesian(ylim = c(0.044,0.955))
print(p)
ggsave(filename = "test.png", plot = p ,path = "/Users/gonzalojaimovitch/Desktop/hum_acc_err", height = 70, width = 120, units = "mm")
library(scales)
setwd("~/Desktop/hum_acc_err")
data <- read.csv(file = "file_noempty.csv",sep=";")
data$Batch <- factor(data$Batch, levels = c('WS','AS I','AS II'))
#+++++++++++++++++++++++++
# Function to calculate the mean and the standard deviation
# for each group
#+++++++++++++++++++++++++
# data : a data frame
# varname : the name of a column containing the variable
#to be summariezed
# groupnames : vector of column names to be used as
# grouping variables
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
df2 <- data_summary(data, varname="Accuracy",
groupnames=c("Concept", "Batch"))
library(ggplot2)
# Default bar plot
p<- ggplot(df2, aes(x=Concept, y=Accuracy, fill=Batch)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=Accuracy-sd, ymax=Accuracy+sd), width=.2,
position=position_dodge(.9))+
coord_cartesian(ylim = c(0.044,0.955))
print(p)
ggsave(filename = "test1.png", plot = p ,path = "/Users/gonzalojaimovitch/Desktop/hum_acc_err", height = 70, width = 120, units = "mm")
library(scales)
setwd("~/Desktop/hum_acc_err")
data <- read.csv(file = "file_noempty.csv",sep=";")
data$Batch <- factor(data$Batch, levels = c('WS','AS I','AS II'))
#+++++++++++++++++++++++++
# Function to calculate the mean and the standard deviation
# for each group
#+++++++++++++++++++++++++
# data : a data frame
# varname : the name of a column containing the variable
#to be summariezed
# groupnames : vector of column names to be used as
# grouping variables
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
df2 <- data_summary(data, varname="Accuracy",
groupnames=c("Concept", "Batch"))
library(ggplot2)
# Default bar plot
p<- ggplot(df2, aes(x=Concept, y=Accuracy, fill=Batch)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=Accuracy-sd, ymax=Accuracy+sd), width=.2,
position=position_dodge(.9))+
coord_cartesian(ylim = c(0.044,0.955))
print(p)
ggsave(filename = "test1.png", plot = p ,path = "/Users/gonzalojaimovitch/Desktop/hum_acc_err", height = 70, width = 120, units = "mm")
library(scales)
setwd("~/Desktop/hum_acc_err")
data <- read.csv(file = "file_noempty.csv",sep=";")
data$Batch <- factor(data$Batch, levels = c('WS','AS I','AS II'))
#+++++++++++++++++++++++++
# Function to calculate the mean and the standard deviation
# for each group
#+++++++++++++++++++++++++
# data : a data frame
# varname : the name of a column containing the variable
#to be summariezed
# groupnames : vector of column names to be used as
# grouping variables
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
df2 <- data_summary(data, varname="Accuracy",
groupnames=c("Concept", "Batch"))
library(ggplot2)
# Default bar plot
p<- ggplot(df2, aes(x=Concept, y=Accuracy, fill=Batch)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=Accuracy-sd, ymax=Accuracy+sd), width=.2,
position=position_dodge(.9))+
coord_cartesian(ylim = c(0.044,0.955))
print(p)
ggsave(filename = "test1.png", plot = p ,path = "/Users/gonzalojaimovitch/Desktop/hum_acc_err", height = 70, width = 120, units = "mm")
library(scales)
setwd("~/Desktop/hum_acc_err")
data <- read.csv(file = "file_noempty.csv",sep=";")
data$Batch <- factor(data$Batch, levels = c('WS','AS I','AS II'))
#+++++++++++++++++++++++++
# Function to calculate the mean and the standard deviation
# for each group
#+++++++++++++++++++++++++
# data : a data frame
# varname : the name of a column containing the variable
#to be summariezed
# groupnames : vector of column names to be used as
# grouping variables
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
df2 <- data_summary(data, varname="Accuracy",
groupnames=c("Concept", "Batch"))
library(ggplot2)
# Default bar plot
p<- ggplot(df2, aes(x=Concept, y=Accuracy, fill=Batch)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=Accuracy-sd, ymax=Accuracy+sd), width=.2,
position=position_dodge(.9))+
coord_cartesian(ylim = c(0.044,0.955))
print(p)
ggsave(filename = "test1.png", plot = p ,path = "/Users/gonzalojaimovitch/Desktop/hum_acc_err", height = 70, width = 120, units = "mm")
#Necessary packages. Note that some fonts need to be downloaded and installed in the OS
library(ggplot2)
library(extrafont)
library(tidyverse)
library(wesanderson)
library(reshape2)
loadfonts()
#Insert the preferred directory to store the generated plots
directory <- "INSERT"
lgtbVRAINPalette <- c("#55CDFC","#F7A8B8","#FF0018","#FF8C00","#008026","#004DFF","#750787","#FFED00","#0F8698")
cubeHelixPalette <- c("#297534","#B4B1EE","#ED7164","#141227")
df7 <- data.frame(phases=c("WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II"),accuracies=c(0.8,0.8,1,0.067,0.533,0.644,0.05,0.367,0.367,0.144,0.3,0.467),complexities=c("VL-C","VL-C","VL-C","L-C","L-C","L-C","H-C","H-C","H-C","VH-C","VH-C","VH-C"), learners=c("GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0"))
df7$phases <- factor(df7$phases, levels = c('WS','AS I','AS II'))
df7$complexities <- factor(df7$complexities, levels = c('VL-C','L-C','H-C','VH-C'))
plot1 <- ggplot(df7b,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=factor(Group.1)))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,80)+theme(legend.text = element_text(size = 6),legend.position=c(0.497, 0.865),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(11,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=4))
#Necessary packages. Note that some fonts need to be downloaded and installed in the OS
library(ggplot2)
library(extrafont)
library(tidyverse)
library(wesanderson)
library(reshape2)
loadfonts()
#Insert the preferred directory to store the generated plots
directory <- "INSERT"
lgtbVRAINPalette <- c("#55CDFC","#F7A8B8","#FF0018","#FF8C00","#008026","#004DFF","#750787","#FFED00","#0F8698")
cubeHelixPalette <- c("#297534","#B4B1EE","#ED7164","#141227")
df7 <- data.frame(phases=c("WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II"),accuracies=c(0.8,0.8,1,0.067,0.533,0.644,0.05,0.367,0.367,0.144,0.3,0.467),complexities=c("VL-C","VL-C","VL-C","L-C","L-C","L-C","H-C","H-C","H-C","VH-C","VH-C","VH-C"), learners=c("GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0"))
df7$phases <- factor(df7$phases, levels = c('WS','AS I','AS II'))
df7$complexities <- factor(df7$complexities, levels = c('VL-C','L-C','H-C','VH-C'))
df7b <- aggregate(df7, by = list(df7$learners, df7$phases), FUN =mean)
plot1 <- ggplot(df7b,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=factor(Group.1)))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,80)+theme(legend.text = element_text(size = 6),legend.position=c(0.497, 0.865),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(11,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=4))
df7
df7
df7b
plot1
#Necessary packages. Note that some fonts need to be downloaded and installed in the OS
library(ggplot2)
library(extrafont)
library(tidyverse)
library(wesanderson)
library(reshape2)
loadfonts()
#Insert the preferred directory to store the generated plots
directory <- "INSERT"
lgtbVRAINPalette <- c("#55CDFC","#F7A8B8","#FF0018","#FF8C00","#008026","#004DFF","#750787","#FFED00","#0F8698")
cubeHelixPalette <- c("#297534","#B4B1EE","#ED7164","#141227")
df7 <- data.frame(phases=c("WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II"),accuracies=c(80,80,100,6.67,53.3,64.4,5,36.67,36.67,14.44,30,46.67),complexities=c("VL-C","VL-C","VL-C","L-C","L-C","L-C","H-C","H-C","H-C","VH-C","VH-C","VH-C"), learners=c("GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0"))
df7$phases <- factor(df7$phases, levels = c('WS','AS I','AS II'))
df7$complexities <- factor(df7$complexities, levels = c('VL-C','L-C','H-C','VH-C'))
df7b <- aggregate(df7, by = list(df7$learners, df7$phases), FUN =mean)
plot1 <- ggplot(df7b,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=factor(Group.1)))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,80)+theme(legend.text = element_text(size = 6),legend.position=c(0.497, 0.865),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(11,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=4))
plot1
#Necessary packages. Note that some fonts need to be downloaded and installed in the OS
library(ggplot2)
library(extrafont)
library(tidyverse)
library(wesanderson)
library(reshape2)
loadfonts()
#Insert the preferred directory to store the generated plots
directory <- "/Users/gonzalojaimovitch/Desktop/add_plots"
lgtbVRAINPalette <- c("#55CDFC","#F7A8B8","#FF0018","#FF8C00","#008026","#004DFF","#750787","#FFED00","#0F8698")
cubeHelixPalette <- c("#297534","#B4B1EE","#ED7164","#141227")
df7 <- data.frame(phases=c("WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II"),accuracies=c(80,80,100,6.67,53.3,64.4,5,36.67,36.67,14.44,30,46.67),complexities=c("VL-C","VL-C","VL-C","L-C","L-C","L-C","H-C","H-C","H-C","VH-C","VH-C","VH-C"), learners=c("GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0"))
df7$phases <- factor(df7$phases, levels = c('WS','AS I','AS II'))
df7$complexities <- factor(df7$complexities, levels = c('VL-C','L-C','H-C','VH-C'))
df7b <- aggregate(df7, by = list(df7$learners, df7$phases), FUN =mean)
plot1 <- ggplot(df7b,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=factor(Group.1)))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,80)+theme(legend.text = element_text(size = 6),legend.position=c(0.497, 0.865),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(11,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=4))
ggsave(filename = "g1.png", plot = plot1 ,path = directory, height = 70, width = 120, units = "mm")
#Necessary packages. Note that some fonts need to be downloaded and installed in the OS
library(ggplot2)
library(extrafont)
library(tidyverse)
library(wesanderson)
library(reshape2)
loadfonts()
#Insert the preferred directory to store the generated plots
directory <- "/Users/gonzalojaimovitch/Desktop/add_plots"
lgtbVRAINPalette <- c("#F7A8B8","#FF0018","#FF8C00","#008026","#004DFF","#750787","#FFED00","#0F8698")
cubeHelixPalette <- c("#297534","#B4B1EE","#ED7164","#141227")
df7 <- data.frame(phases=c("WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II"),accuracies=c(80,80,100,6.67,53.3,64.4,5,36.67,36.67,14.44,30,46.67),complexities=c("VL-C","VL-C","VL-C","L-C","L-C","L-C","H-C","H-C","H-C","VH-C","VH-C","VH-C"), learners=c("GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0"))
df7$phases <- factor(df7$phases, levels = c('WS','AS I','AS II'))
df7$complexities <- factor(df7$complexities, levels = c('VL-C','L-C','H-C','VH-C'))
df7b <- aggregate(df7, by = list(df7$learners, df7$phases), FUN =mean)
plot1 <- ggplot(df7b,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=factor(Group.1)))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,80)+theme(legend.text = element_text(size = 6),legend.position=c(0.497, 0.865),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(11,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=4))
ggsave(filename = "g1.png", plot = plot1 ,path = directory, height = 70, width = 120, units = "mm")
#Necessary packages. Note that some fonts need to be downloaded and installed in the OS
library(ggplot2)
library(extrafont)
library(tidyverse)
library(wesanderson)
library(reshape2)
loadfonts()
#Insert the preferred directory to store the generated plots
directory <- "/Users/gonzalojaimovitch/Desktop/add_plots"
lgtbVRAINPalette <- c("#F7A8B8","#FF0018","#FF8C00","#008026","#004DFF","#750787","#FFED00","#0F8698")
cubeHelixPalette <- c("#297534","#B4B1EE","#ED7164","#141227")
df7 <- data.frame(phases=c("WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II"),accuracies=c(80,80,100,6.67,53.3,64.4,5,36.67,36.67,14.44,30,46.67),complexities=c("VL-C","VL-C","VL-C","L-C","L-C","L-C","H-C","H-C","H-C","VH-C","VH-C","VH-C"), learners=c("GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0"))
df7$phases <- factor(df7$phases, levels = c('WS','AS I','AS II'))
df7$complexities <- factor(df7$complexities, levels = c('VL-C','L-C','H-C','VH-C'))
df7a <- aggregate(df7, by = list(df7$learners, df7$complexities), FUN =mean)
plot1 <- ggplot(df7a,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=Group.1))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,100)+theme(legend.text = element_text(size = 6),legend.position=c(0.716, 0.8),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(12,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=2))
ggsave(filename = "g2.png", plot = plot1 ,path = directory, height = 70, width = 120, units = "mm")
df7b <- aggregate(df7, by = list(df7$learners, df7$phases), FUN =mean)
plot1 <- ggplot(df7b,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=factor(Group.1)))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,80)+theme(legend.text = element_text(size = 6),legend.position=c(0.497, 0.865),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(11,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=4))
ggsave(filename = "g1.png", plot = plot1 ,path = directory, height = 70, width = 120, units = "mm")
df7b
#Necessary packages. Note that some fonts need to be downloaded and installed in the OS
library(ggplot2)
library(extrafont)
library(tidyverse)
library(wesanderson)
library(reshape2)
loadfonts()
#Insert the preferred directory to store the generated plots
directory <- "/Users/gonzalojaimovitch/Desktop/add_plots"
lgtbVRAINPalette <- c("#F7A8B8","#FF0018","#FF8C00","#008026","#004DFF","#750787","#FFED00","#0F8698")
cubeHelixPalette <- c("#297534","#B4B1EE","#ED7164","#141227")
df7 <- data.frame(phases=c("WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II"),accuracies=c(80,80,100,6.67,53.3,64.4,5,36.67,36.67,14.44,30,46.67,80.0,80.0,100.0,10.0,30.0,46.67,0.0,33.33,33.33,33.33,50.0,50.0),complexities=c("VL-C","VL-C","VL-C","L-C","L-C","L-C","H-C","H-C","H-C","VH-C","VH-C","VH-C"), learners=c("GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)"))
"GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)"
df7$phases <- factor(df7$phases, levels = c('WS','AS I','AS II'))
df7$complexities <- factor(df7$complexities, levels = c('VL-C','L-C','H-C','VH-C'))
df7a <- aggregate(df7, by = list(df7$learners, df7$complexities), FUN =mean)
plot1 <- ggplot(df7a,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=Group.1))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,100)+theme(legend.text = element_text(size = 6),legend.position=c(0.716, 0.8),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(12,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=2))
ggsave(filename = "g2.png", plot = plot1 ,path = directory, height = 70, width = 120, units = "mm")
df7b <- aggregate(df7, by = list(df7$learners, df7$phases), FUN =mean)
plot1 <- ggplot(df7b,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=factor(Group.1)))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,80)+theme(legend.text = element_text(size = 6),legend.position=c(0.497, 0.865),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(11,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=4))
ggsave(filename = "g1.png", plot = plot1 ,path = directory, height = 70, width = 120, units = "mm")
#Necessary packages. Note that some fonts need to be downloaded and installed in the OS
library(ggplot2)
library(extrafont)
library(tidyverse)
library(wesanderson)
library(reshape2)
loadfonts()
#Insert the preferred directory to store the generated plots
directory <- "/Users/gonzalojaimovitch/Desktop/add_plots"
lgtbVRAINPalette <- c("#F7A8B8","#FF8C00","#008026","#004DFF","#750787","#FFED00","#0F8698")
cubeHelixPalette <- c("#297534","#B4B1EE","#ED7164","#141227")
df7 <- data.frame(phases=c("WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II"),accuracies=c(80,80,100,6.67,53.3,64.4,5,36.67,36.67,14.44,30,46.67,80.0,80.0,100.0,10.0,30.0,46.67,0.0,33.33,33.33,33.33,50.0,50.0),complexities=c("VL-C","VL-C","VL-C","L-C","L-C","L-C","H-C","H-C","H-C","VH-C","VH-C","VH-C"), learners=c("GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)"))
"GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)"
df7$phases <- factor(df7$phases, levels = c('WS','AS I','AS II'))
df7$complexities <- factor(df7$complexities, levels = c('VL-C','L-C','H-C','VH-C'))
df7a <- aggregate(df7, by = list(df7$learners, df7$complexities), FUN =mean)
plot1 <- ggplot(df7a,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=Group.1))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,100)+theme(legend.text = element_text(size = 6),legend.position=c(0.716, 0.8),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(12,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=2))
ggsave(filename = "g2.png", plot = plot1 ,path = directory, height = 70, width = 120, units = "mm")
df7b <- aggregate(df7, by = list(df7$learners, df7$phases), FUN =mean)
plot1 <- ggplot(df7b,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=factor(Group.1)))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,80)+theme(legend.text = element_text(size = 6),legend.position=c(0.497, 0.865),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(11,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=4))
ggsave(filename = "g1.png", plot = plot1 ,path = directory, height = 70, width = 120, units = "mm")
#Necessary packages. Note that some fonts need to be downloaded and installed in the OS
library(ggplot2)
library(extrafont)
library(tidyverse)
library(wesanderson)
library(reshape2)
loadfonts()
#Insert the preferred directory to store the generated plots
directory <- "/Users/gonzalojaimovitch/Desktop/add_plots"
lgtbVRAINPalette <- c("#F7A8B8","#008026","#004DFF","#750787","#FFED00","#0F8698")
cubeHelixPalette <- c("#297534","#B4B1EE","#ED7164","#141227")
df7 <- data.frame(phases=c("WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II"),accuracies=c(80,80,100,6.67,53.3,64.4,5,36.67,36.67,14.44,30,46.67,80.0,80.0,100.0,10.0,30.0,46.67,0.0,33.33,33.33,33.33,50.0,50.0),complexities=c("VL-C","VL-C","VL-C","L-C","L-C","L-C","H-C","H-C","H-C","VH-C","VH-C","VH-C"), learners=c("GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)"))
"GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)"
df7$phases <- factor(df7$phases, levels = c('WS','AS I','AS II'))
df7$complexities <- factor(df7$complexities, levels = c('VL-C','L-C','H-C','VH-C'))
df7a <- aggregate(df7, by = list(df7$learners, df7$complexities), FUN =mean)
plot1 <- ggplot(df7a,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=Group.1))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,100)+theme(legend.text = element_text(size = 6),legend.position=c(0.716, 0.8),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(12,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=2))
ggsave(filename = "g2.png", plot = plot1 ,path = directory, height = 70, width = 120, units = "mm")
df7b <- aggregate(df7, by = list(df7$learners, df7$phases), FUN =mean)
plot1 <- ggplot(df7b,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=factor(Group.1)))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,80)+theme(legend.text = element_text(size = 6),legend.position=c(0.497, 0.865),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(11,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=4))
ggsave(filename = "g1.png", plot = plot1 ,path = directory, height = 70, width = 120, units = "mm")
#Necessary packages. Note that some fonts need to be downloaded and installed in the OS
library(ggplot2)
library(extrafont)
library(tidyverse)
library(wesanderson)
library(reshape2)
loadfonts()
#Insert the preferred directory to store the generated plots
directory <- "/Users/gonzalojaimovitch/Desktop/add_plots"
lgtbVRAINPalette <- c("#55CDFC","#F7A8B8","#008026","#004DFF","#750787","#FFED00","#0F8698")
cubeHelixPalette <- c("#297534","#B4B1EE","#ED7164","#141227")
df7 <- data.frame(phases=c("WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II"),accuracies=c(80,80,100,6.67,53.3,64.4,5,36.67,36.67,14.44,30,46.67,80.0,80.0,100.0,10.0,30.0,46.67,0.0,33.33,33.33,33.33,50.0,50.0),complexities=c("VL-C","VL-C","VL-C","L-C","L-C","L-C","H-C","H-C","H-C","VH-C","VH-C","VH-C"), learners=c("GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)"))
"GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)"
df7$phases <- factor(df7$phases, levels = c('WS','AS I','AS II'))
df7$complexities <- factor(df7$complexities, levels = c('VL-C','L-C','H-C','VH-C'))
df7a <- aggregate(df7, by = list(df7$learners, df7$complexities), FUN =mean)
plot1 <- ggplot(df7a,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=Group.1))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,100)+theme(legend.text = element_text(size = 6),legend.position=c(0.716, 0.8),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(12,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=2))
ggsave(filename = "g2.png", plot = plot1 ,path = directory, height = 70, width = 120, units = "mm")
df7b <- aggregate(df7, by = list(df7$learners, df7$phases), FUN =mean)
plot1 <- ggplot(df7b,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=factor(Group.1)))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,80)+theme(legend.text = element_text(size = 6),legend.position=c(0.497, 0.865),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(11,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=4))
ggsave(filename = "g1.png", plot = plot1 ,path = directory, height = 70, width = 120, units = "mm")
#Necessary packages. Note that some fonts need to be downloaded and installed in the OS
library(ggplot2)
library(extrafont)
library(tidyverse)
library(wesanderson)
library(reshape2)
loadfonts()
#Insert the preferred directory to store the generated plots
directory <- "/Users/gonzalojaimovitch/Desktop/add_plots"
lgtbVRAINPalette <- c("#55CDFC","#F7A8B8","#008026","#004DFF","#750787","#FFED00","#0F8698")
cubeHelixPalette <- c("#297534","#B4B1EE","#ED7164","#141227")
df7 <- data.frame(phases=c("WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II","WS", "AS I", "AS II"),accuracies=c(80,80,100,6.67,53.3,64.4,5,36.67,36.67,14.44,30,46.67,80.0,80.0,100.0,10.0,30.0,46.67,0.0,33.33,33.33,33.33,50.0,50.0),complexities=c("VL-C","VL-C","VL-C","L-C","L-C","L-C","H-C","H-C","H-C","VH-C","VH-C","VH-C"), learners=c("GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)"))
"GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)","GPT-3D-T0 (Paper)"
df7$phases <- factor(df7$phases, levels = c('WS','AS I','AS II'))
df7$complexities <- factor(df7$complexities, levels = c('VL-C','L-C','H-C','VH-C'))
df7a <- aggregate(df7, by = list(df7$learners, df7$complexities), FUN =mean)
plot1 <- ggplot(df7a,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=Group.1))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,100)+theme(legend.text = element_text(size = 6),legend.position=c(0.69, 0.8),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(12,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=2))
ggsave(filename = "g2.png", plot = plot1 ,path = directory, height = 70, width = 120, units = "mm")
df7b <- aggregate(df7, by = list(df7$learners, df7$phases), FUN =mean)
plot1 <- ggplot(df7b,aes(x=Group.2,y=accuracies,group=Group.1,linetype=Group.1,color=factor(Group.1)))+
geom_line()+geom_point()+scale_color_manual("", values=lgtbVRAINPalette)+scale_linetype_manual("",values = c(1,2,3,4,5,6,7,8))+ylab("Average Accuracies (%)")+ylim(0,80)+theme(legend.text = element_text(size = 6),legend.position=c(0.497, 0.865),axis.title.x=element_blank(),text = element_text(size=12, family="LM Roman 10"),panel.background = element_blank(),panel.grid.major.x = element_line(colour = "grey", size = 0.1),panel.grid.minor.x = element_blank(),panel.grid.major.y = element_line(colour = "grey", size = 0.1),panel.grid.minor.y = element_line(colour = "grey", size = 0.05),panel.border = element_rect(colour = "grey", fill=NA), legend.key.width = unit(11,"mm"), legend.key = element_blank(), legend.title = element_blank())+guides(colour = guide_legend(ncol=4))
ggsave(filename = "g1.png", plot = plot1 ,path = directory, height = 70, width = 120, units = "mm")
